generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Manufacturer {
  vendor_pharm_name String   @id @unique  
  vendor_name       String
  contact_number    String    @db.VarChar(10)
  email             String?   @unique
  address           String?
  city              String?
  state             String?
  zip_code          String?   @db.VarChar(10)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  medicines         Medicine[] 
}

model Medicine {
  medicine_id      Int         @id @default(autoincrement())
  medicine_name    String
  stock_quantity   Int
  price_per_unit   Decimal     @db.Decimal(10, 2)
  unit_quantity    Decimal     @db.Decimal(10, 2)
  batch_number     String
  // balance 
  expiry_date      DateTime
  manufacturer_name  String     
  manufacturer     Manufacturer @relation(fields: [manufacturer_name], references: [vendor_pharm_name]) 
  
  @@unique([medicine_name, manufacturer_name]) 
}

model Department {
  department_name    String     @id @db.VarChar(100)
  head_of_department String?    @db.VarChar(100)
  
  doctors            Doctor[]
  staff              Staff[]
}

model Doctor {
  doctor_id         Int        @id @default(autoincrement())
  name              String     @db.VarChar(100)
  specialty         String     @db.VarChar(100)
  contact_number    String     @db.VarChar(15)
  email             String     @db.VarChar(100)
  experience_years  Int
  department_name   String 

  department        Department @relation(fields: [department_name], references: [department_name])
  
  prescriptions    Prescription[]  
  tests            PatientTests[]
}

model Staff {
  staff_id         Int        @id @default(autoincrement())
  name             String     @db.VarChar(100)
  role             String     @db.VarChar(100) 
  contact_number   String     @db.VarChar(10)
  email            String     @db.VarChar(100)
  shift_time       String     @db.VarChar(100) 
  department_name  String
  salary           Decimal    @db.Decimal(10, 2)
  department       Department @relation(fields: [department_name], references: [department_name])
}

model LabTest {
  test_name   String  @id @db.VarChar(100)
  cost        Decimal @db.Decimal(10, 2)
  description String  @db.Text

  tests            PatientTests[]
}


model Patient {
  patient_id       String          @id @db.VarChar(15) 
  name             String          @db.VarChar(100)
  gender           Gender
  date_of_birth    DateTime
  age              Int
  contact_number   String          @db.VarChar(10)
  email            String?         @db.VarChar(100)
  address          String?         @db.Text
  city             String?         @db.VarChar(100)
  state            String?         @db.VarChar(100)
  zip_code         String?         @db.VarChar(10)
  registration_date DateTime       @default(now())
  category         Category

  prescriptions    Prescription[]  // Relation to Prescription model
  tests            PatientTests[]  // Relation to PatientTests model
  services         PatientService[] // Relation to PatientService model
}

enum Gender {
  Male
  Female
  Other
}

enum Category {
  Gynecology
  IVF
  Other
}

model PatientService {
  service_id    Int       @id @default(autoincrement())  
  patient_id    String    @db.VarChar(15)                
  service_name  String    @db.VarChar(100)               
  service_type  ServiceType                              
  cost          Decimal   @db.Decimal(10, 2)            
  quantity      Int                                      
  total_cost    Decimal   @db.Decimal(10, 2)             
  created_at    DateTime  @default(now())                

  patient    Patient   @relation(fields: [patient_id], references: [patient_id]) 

  @@index([patient_id]) 
}

enum ServiceType {
  Hospital
  Consultation
  Surgery
  Diagnostic
  Therapy
  Medication
  Other
}

model Prescription {
  prescription_id   Int      @id @default(autoincrement())
  patient_id        String   @db.VarChar(15)
  doctor_id         Int
  prescription_date DateTime @default(now()) // This will store the current date and time
  medicine_name     String   @db.VarChar(100)
  dosage            String   @db.VarChar(100)
  duration          String   @db.VarChar(50)
  duration_type     String   @db.VarChar(50) // Days, Weeks
  is_paid           Boolean  @default(false)

  patient           Patient  @relation(fields: [patient_id], references: [patient_id])   
  doctor            Doctor   @relation(fields: [doctor_id], references: [doctor_id])
}

model PatientTests {
  result_id          Int      @id @default(autoincrement())
  patient_id         String   @db.VarChar(15)
  test_name          String   @db.VarChar(100)
  test_date          DateTime @default(now()) 
  result_description String   @db.Text
  doctor_id          Int
  is_paid            Boolean  @default(false)

  patient            Patient  @relation(fields: [patient_id], references: [patient_id]) 
  doctor             Doctor   @relation(fields: [doctor_id], references: [doctor_id])
  labTest            LabTest  @relation(fields: [test_name], references: [test_name])
}
